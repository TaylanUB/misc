(define (random-between min max)
  (+ min (random (+ 1 (- max min)))))

(define (vector-swap! vector i j)
  (let ((i-value (vector-ref vector i)))
    (vector-set! vector i (vector-ref vector j))
    (vector-set! vector j i-value)))

(define (sort-around-pivot vector left-bound pivot right-bound)
  (let ((pivot-value (vector-ref vector pivot)))
    (let swapping-walk ((left left-bound)
                        (right right-bound))
      (cond
       ((= left pivot)
        (let pivot-moving-walk ((pivot pivot)
                                (walking-pointer (+ 1 pivot)))
          (if (<= walking-pointer right)
              (if (< pivot-value
                     (vector-ref vector walking-pointer))
                  (pivot-moving-walk pivot (+ 1 walking-pointer))
                  (begin (if (not (= walking-pointer (+ 1 pivot)))
                             (vector-swap! vector pivot (+ 1 pivot)))
                         (vector-swap! vector pivot walking-pointer)
                         (pivot-moving-walk (+ 1 pivot) (+ 1 walking-pointer))))
              pivot)))
       ((= right pivot)
        (let pivot-moving-walk ((pivot pivot)
                                (walking-pointer (+ -1 pivot)))
          (if (<= left walking-pointer)
              (if (< (vector-ref vector walking-pointer)
                     pivot-value)
                  (pivot-moving-walk pivot (+ -1 walking-pointer))
                  (begin (if (not (= walking-pointer (+ -1 pivot)))
                             (vector-swap! vector pivot (+ -1 pivot)))
                         (vector-swap! vector pivot walking-pointer)
                         (pivot-moving-walk (+ -1 pivot) (+ -1 walking-pointer))))
              pivot)))
       (else
        (if (< (vector-ref vector left)
               pivot-value)
            (swapping-walk (+ 1 left) right)
            (let find-swap ((right right))
              (if (= pivot right)
                  (swapping-walk left right)
                  (if (< pivot-value
                         (vector-ref vector right))
                      (find-swap (+ -1 right))
                      (begin (vector-swap! vector left right)
                             (swapping-walk (+ 1 left) (+ -1 right))))))))))))

(define (quicksort-in-place vector left right)
  (if (< left right)
      (let ((pivot (random-between left right)))
        (let ((new-pivot (sort-around-pivot vector left pivot right)))
          (quicksort-in-place vector left (+ -1 new-pivot))
          (quicksort-in-place vector (+ 1 new-pivot) right)))))

;;; Wikipedia's implementation (seems to be slower):

(define (partition vector left pivot right)
  (let ((pivot-value (vector-ref vector pivot)))
    (vector-swap! vector pivot right)
    (let walk ((i left)
               (new-pivot left))
      (if (= i right)
          (begin (vector-swap! vector new-pivot right)
                 new-pivot)
          (if (< (vector-ref vector i) pivot-value)
              (begin (vector-swap! vector i new-pivot)
                     (walk (+ 1 i) (+ 1 new-pivot)))
              (walk (+ 1 i) new-pivot))))))

(define (quicksort-in-place* vector left right)
  (if (< left right)
      (let ((pivot (random-between left right)))
        (let ((new-pivot (partition vector left pivot right)))
          (quicksort-in-place* vector left (+ -1 new-pivot))
          (quicksort-in-place* vector (+ 1 new-pivot) right)))))
